// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

// generator client {
//   provider = "prisma-client-js"
// }
// datasource db {
//   provider = "mysql"
//   url = env("DATABASE_URL")
//   relationMode = "prisma"
// }

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// model Post {
//   id        String     @default(cuid()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String?
// }

model User {
  id        String     @id @default(cuid())
  username  String     @unique
  password  String
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  questions Question[] @relation("UserQuestions")

  @@map(name: "users")
}

model Question {
  id           String   @id @default(cuid())
  content      String
  answer       String
  answerChoice Int
  options      String[]
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  user         User     @relation(fields: [userId], references: [id], name: "UserQuestions")
  userId       String
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  interval Int @default(0)
  repetition Int @default(0)
  efactor Float @default(2.5)
  // 回顾时间
  reviewedAt DateTime   @default(now()) @map(name: "review_at")
  @@map(name: "questions")
}

model Category {
  id         String     @id @default(cuid())
  name       String     @unique
  questions  Question[]
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  @@map(name: "categories")
}
